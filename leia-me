# api-captacao-teste

- Aplicativo desenvolvido como avaliação a vaga de emprego de analista de sistemas.

Seguem as regras estabelecidas
Prazo: 23/07 - Forma de entrega: e-mail com repositório do github

Implementar uma API para sistema de indicações.
# TAREFAS
    IMPLEMENTAÇÃO DA API COM FRAMEWORK (LARAVEL)
    CRIAÇÃO DA ESTRUTURA DO BANCO DE DADOS (POSTGRESQL)
    VALIDAÇÃO DE CPF E EMAIL
    CPF NÃO PODE SER INDICADO MAIS DE UMA VEZ

# ESTRUTURA DO BANCO
    INDICAÇÕES: ID, NOME, CPF, TELEFONE, EMAIL, STATUS_ID
    STATUS DAS INDICAÇÕES: ID, DESCRIÇÃO [1. INICIADA / 2. FINALIZADA / 3. EM PROCESSO]

# FUNCIONALIDADES
    LISTAR 
    INCLUIR (STATUS INICIAL = INICIADA)
    EVOLUIR STATUS (precisa seguir o fluxo Iniciada -> Em processo -> Finalizada)

Por se tratar de uma API, não é necessário a implementação de telas para a solução.


# Ferramentas usadas

- Aptana Studio
- Bitnami (integrados apache 2.0, php versão 7.3.10, postgresql versão 9.5, laravel versão 10.15.0)
- GitHub
- Git
- Postman (para os testes)


# Estrutura de banco de dados

CREATE TABLE public.indicacao (
    id bigint NOT NULL DEFAULT nextval('indicacao_id_seq'::regclass),
    nome character varying(80) COLLATE pg_catalog."default" NOT NULL,
    cpf character varying COLLATE pg_catalog."default" NOT NULL,
    telefone character varying COLLATE pg_catalog."default",
    email character varying(80) COLLATE pg_catalog."default",
    status_id integer,
    CONSTRAINT indicacao_pkey PRIMARY KEY (id),
    CONSTRAINT indicacao_status_id_fkey FOREIGN KEY (status_id)
        REFERENCES public.indicacaostatus (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)


CREATE TABLE public.indicacaostatus (
    id integer NOT NULL DEFAULT nextval('indicacaostatus_id_seq'::regclass),
    descricao character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT indicacaostatus_pkey PRIMARY KEY (id)
)

# Nome da API
   api-indicacao

# Classes da API (pasta api-indicacao\app\http\Controllers

	IndicacaoController	 - Manter dados da indicação

	ValidationController – Métodos de validação de dados da indicação

# Rotas

	Route::get('/indicacao', 'IndicacaoController@indicacao');

	Route::post('/indicacao', 'IndicacaoController@salvar');

	Route::put('/indicacao', 'IndicacaoController@status');

	Route::get('/showindicacao/{id}', 'IndicacaoController@showindicacao');

	Route::get('/showindicacaostatus/{id}', 'IndicacaoController@showindicacaostatus');


# Testes realizados no POSTMAN


-----
# APLICAÇÕES USADAS NO DESENVOLVIMENTO
  Foi usado como base o Bitnami com Apache, PHP, Postgresql e Laravel
# TESTES
   Foi usado o POSTMAN para realização dos testes da API

